# --------------------------------------------------------------------
# For the complete Windows build procedure, please read
# README-BUILD-win32.txt .
#
# Some general advice for building PyGTK-based Windows .EXEs can be
# found here:
# http://www.no-ack.org/2010/09/complete-guide-to-py2exe-for-pygtk.html
# --------------------------------------------------------------------

import os
from os import path
import sys
import shutil
import glob
import datetime
import re
import subprocess
import distutils.dir_util
from distutils.sysconfig import get_python_lib

os.chdir(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))

# contants for this script
#
# windows
#   /build                  BUILD_ROOT
#     /ZimDesktopWiki       APP_ROOT
#       /App
#         /ZimDesktopWiki   EXE_ROOT
#
BUILD_ROOT = r"windows\build"
APP_ROOT = path.join(BUILD_ROOT, "ZimDesktopWiki")
EXE_ROOT = path.join(APP_ROOT, r"App\ZimDesktopWiki")

# Find GTK 'runtime' folder
for libdir in os.environ["PATH"].split(path.pathsep):
	# Look for GTK bin folder in a $PATH element
	if path.exists(path.join(libdir, "libgtk-win32-2.0-0.dll")):
		GTK_ROOT = path.dirname(libdir)
		break
	# Look for GTK under Python's site-packages folder
	if path.exists(path.join(libdir, r"Lib\site-packages\gtk-2.0\runtime\bin", "libgtk-win32-2.0-0.dll")):
		GTK_ROOT = path.join(libdir, r"Lib\site-packages\gtk-2.0\runtime")
		break
if not GTK_ROOT:
	raise RuntimeError("Can't find GTK")

# Parse '__version__' out of zim package since simply importing __version__ from zim fails as of 0.61
f = open("zim/__init__.py", "r")
text = f.read()
f.close()
match = re.search(r"^\s*__version__\s*=\s*'([\d\.]+)'\s*$", text, re.MULTILINE)
__version__ = match.group(1)

# --------------------------------------
# BUILD
# --------------------------------------

# Clean up and initialize the build directory
# (Use cmd.exe because shutil.rmtree seems to fail to delete "Microsoft.VC90.CRT" folder.)
if path.exists(BUILD_ROOT):
		subprocess.check_call([
				'cmd.exe', '/c',
				'cd', '/d', os.getcwd(), '&&',
				'rmdir' , '/s', '/q', BUILD_ROOT
		])
os.makedirs(EXE_ROOT)

# Create main zim.exe and any files generated by setup.py
subprocess.check_call(['python.exe', 'setup.py', 'build'])
subprocess.check_call(['python.exe', 'setup.py', 'py2exe', '--dist-dir', EXE_ROOT])

# Copy GTK runtime
print("Copying GTK runtime...")
for d in ["etc", "lib", "share"]:
	distutils.dir_util.copy_tree(path.join(GTK_ROOT, d), path.join(EXE_ROOT, d), update=1)
for ext in ["*.exe", "*.dll"]:
	files = glob.iglob(os.path.join(GTK_ROOT, "bin", ext))
	for file in files:
		if os.path.isfile(file):
			shutil.copy(file, EXE_ROOT)
os.remove(os.path.join(EXE_ROOT, "gtk-demo.exe"))

# Remove docs from copied GTK runtime
shutil.rmtree(path.join(EXE_ROOT, r"share\doc"), True)
shutil.rmtree(path.join(EXE_ROOT, r"share\gtk-doc"), True)
print("Done copying GTK runtime.")

# Load Zim's data folder
shutil.copytree("data", path.join(EXE_ROOT, "data"))

# Copy icon files
distutils.dir_util.copy_tree("icons", path.join(EXE_ROOT, "icons"), update=1)

# Copy translation files
distutils.dir_util.copy_tree("locale", path.join(EXE_ROOT, "locale"), update=1)

# Copy the hicolor icon theme from windows folder because it's missing from Gtk/win32 distro
p = path.join(EXE_ROOT, r"share\icons\hicolor")
if not path.exists(p): os.makedirs(p)
shutil.copy(
	r"windows\src\hicolor-icon-theme__index.theme",
	path.join(EXE_ROOT, r"share\icons\hicolor\index.theme")
)

# Copy jpeg62.dll
shutil.copy(r"windows\lib\jpeg62.dll", EXE_ROOT)

# Copy msvcr90.dll
dll_target = path.join(EXE_ROOT, "Microsoft.VC90.CRT")
os.mkdir(dll_target)
dll_dir = glob.glob(r"C:\Windows\winsxs\x86_microsoft.vc90.crt*9.0.21022.8*")
dll_manifest = glob.glob(r"C:\Windows\winsxs\Manifests\x86_microsoft.vc90.crt*9.0.21022.8*.manifest")
if dll_dir == None or dll_manifest == None:
	print("Can't find VC 9.0 runtime DLL.")
	exit(1)
dll_dir = dll_dir[0]
dll_manifest = dll_manifest[0]
files = glob.glob(os.path.join(dll_dir, "*.*"))
for file in files:
	if os.path.isfile(file):
		shutil.copy(file, dll_target)
shutil.copy(dll_manifest, path.join(dll_target, "Microsoft.VC90.CRT.manifest"))

# Set theme to MS-Windows
f = open(os.path.join(EXE_ROOT, r"etc\gtk-2.0\gtkrc"), "w")
print >>f, 'gtk-theme-name = "MS-Windows"'
f.close()

# --------------------------------------
# NSIS STUFF
# --------------------------------------

# print out version number to NSIS include file
f = open(r"windows\build\version-and-date.nsi", "w")
print >>f, '!define VER "%s"' % __version__
print >>f, '!define BUILDDATE "%s"' % datetime.datetime.now().strftime("%Y-%m-%d")
f.close()

# NSIS script compiles to "dist" folder but compiler won't create it if it's needed
if not path.exists("dist"): os.mkdir("dist")
